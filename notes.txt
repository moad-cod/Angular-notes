==> handling submit
    1.import a formModule from user-input.component.ts
    2.add this in user-input.component.html
        <form (ngSubmit)="onSubmit()">
    3.creating a function submit in class user-input

==> Two-way-binding  (extracting values)
('you can exract the new data from app component within gaving the value in the first with user..ts its ok data will be change you will throght somethin into inputs ')

    1.import formModule
    2.add values of your inputs in user-input.component.ts
    {
        enteredInitialInvestment = "0";
    }
    3.add [(ngModel)]='values of your inputs will extracte from the x.ts'
    (and the name is obligation for execute our code with ngModel)
    <p>
        <label for="initial-investment">Initial Investment</label>
        <input id="initial-investment"
        name="initial-investment"
        type="number"
        [(ngModel)]="enteredInitialInvestment">
    </p>

//calculateInvestmentResults(data: {initialInvestment:number, duration:number, expectedReturn:number, annualInvestment:number})
//const {initialInvestment, duration, expectedReturn, annualInvestment} = data; (object destructuring)

==>Output() {EventEmitter}
    1.Import Output and EventEmitter in user-input.compinent.ts
    2.Write this code in ==>class UserInputComponent
    //@Output() /variable/calculate = new EventEmitter<("data of your inputs will flow up to parent component"){initialInvestment:number;duration:number;expectedReturn: number;annualInvestment: number;}>();//
    3.do this for which is commonly used to emit events from child components to parent components.
    //this.calculate.emit({this.variable (of Output)})// ==> is part of Angularâ€™s EventEmitter mechanism,
    4.go to app.component.html and in <app-user-input/> you will ad (variable (Output)) in it like that
    //<app-user-input (calculate)="onCalculateInvestmentResults()"/>//
    4.we use $event like a (parameter) of the data will we use it in EventEmitter like that
    //EventEmitter<{initialInvestment:number;duration:number;expectedReturn: number;annualInvestment: number;}>();//
    $event:pass data which emitted .

==>using a data Model
    1.Create a file name investment-input.model.ts
    2.in the investment-input.model.ts
        will be create a interface {put the data type here} with export before, ability to import the interface in the others components
        //export interface InvestmentInput {
            initialInvestment:number;
            duration:number;
            expectedReturn: number;
            annualInvestment: number;
        }//
        interface: is used to define the structure of an object
    3.When you import it in a component you could do type before {nameInterface} in import section
    //import type { InvestmentInput } from '../investment-input.model';//

==> Parent-child passing data (flow down) <INPUTS>
    1.import Input in file component.ts
    2.Writing this in Component class
        @Input() results?= { data type}[];
    3.go into app.component.html and write this
        //<app-investment-result [results]="resultsData"></app-investment-result>//
        [results]="resultsData" = data well be extract == to pass the value of the resultsData property from the parent component to the app-investment-result child component.
        (The square brackets [ ] denote property binding)

    @input() results!:{data}  (exclamation mark) = it tells typeScript that eve though the variable might not be initialized immediately, you are assuring that will be initialized later,
    @input() results?:{data} (question mark)= the results is optinal, meanining it might be undefined it may not always have a value
        the differnce btween those (! and ?)
    resultsData?: {}[];
            The results property is expected to be an array ([]) of objects.
            Each object in the array must have the following properties

==> outputting data with @if @for
    1.got to html file and do this
        //@if (condition or !condition){
            results
        } @else {
          @for (result of results; track result.year) {
          <tr>
            <td>{{ result.year}}</td>

          </tr>
        }
        }//
==> Formating Output with Pipe
  1.Import in .ts file like CurrencyPipe
  2.use it in html file like this
    <td>{{ result.valueEndOfYear | currency}}</td>
    <td>{{ result.valueEndOfYear | currency:"EUR}}</td>
    go to DUCS
==>service
	import { Injectable } from "@angular/core";

	@Injectable({ providedIn: 'root'})
	export class InvestmentService {

	}
	or 
	private investmentService = inject(InvestmentService);
  	get results() {
    	return this.investmentService.resultsData;
  	}
	
